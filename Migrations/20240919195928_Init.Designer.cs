// <auto-generated />
using System;
using GameLibraryApi.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GameLibraryApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240919195928_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GameLibraryApi.Modules.Items.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("YoutubeUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 9, 19, 19, 59, 27, 693, DateTimeKind.Utc).AddTicks(9013),
                            Description = "Item 1 description",
                            Name = "Item 1",
                            Status = 0,
                            UpdatedAt = new DateTime(2024, 9, 19, 19, 59, 27, 693, DateTimeKind.Utc).AddTicks(9016)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 9, 19, 19, 59, 27, 693, DateTimeKind.Utc).AddTicks(9030),
                            Description = "Item 2 description",
                            Name = "Item 2",
                            Status = 0,
                            UpdatedAt = new DateTime(2024, 9, 19, 19, 59, 27, 693, DateTimeKind.Utc).AddTicks(9031)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 9, 19, 19, 59, 27, 693, DateTimeKind.Utc).AddTicks(9042),
                            Description = "Item 3 description",
                            Name = "Item 3",
                            Status = 0,
                            UpdatedAt = new DateTime(2024, 9, 19, 19, 59, 27, 693, DateTimeKind.Utc).AddTicks(9042)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 9, 19, 19, 59, 27, 693, DateTimeKind.Utc).AddTicks(9056),
                            Description = "Item 4 description",
                            Name = "Item 4",
                            Status = 0,
                            UpdatedAt = new DateTime(2024, 9, 19, 19, 59, 27, 693, DateTimeKind.Utc).AddTicks(9056)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 9, 19, 19, 59, 27, 693, DateTimeKind.Utc).AddTicks(9068),
                            Description = "Item 5 description",
                            Name = "Item 5",
                            Status = 0,
                            UpdatedAt = new DateTime(2024, 9, 19, 19, 59, 27, 693, DateTimeKind.Utc).AddTicks(9068)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 9, 19, 19, 59, 27, 693, DateTimeKind.Utc).AddTicks(9091),
                            Description = "Item 6 description",
                            Name = "Item 6",
                            Status = 0,
                            UpdatedAt = new DateTime(2024, 9, 19, 19, 59, 27, 693, DateTimeKind.Utc).AddTicks(9092)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 9, 19, 19, 59, 27, 693, DateTimeKind.Utc).AddTicks(9104),
                            Description = "Item 7 description",
                            Name = "Item 7",
                            Status = 0,
                            UpdatedAt = new DateTime(2024, 9, 19, 19, 59, 27, 693, DateTimeKind.Utc).AddTicks(9104)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 9, 19, 19, 59, 27, 693, DateTimeKind.Utc).AddTicks(9116),
                            Description = "Item 8 description",
                            Name = "Item 8",
                            Status = 0,
                            UpdatedAt = new DateTime(2024, 9, 19, 19, 59, 27, 693, DateTimeKind.Utc).AddTicks(9116)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 9, 19, 19, 59, 27, 693, DateTimeKind.Utc).AddTicks(9128),
                            Description = "Item 9 description",
                            Name = "Item 9",
                            Status = 0,
                            UpdatedAt = new DateTime(2024, 9, 19, 19, 59, 27, 693, DateTimeKind.Utc).AddTicks(9128)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 9, 19, 19, 59, 27, 693, DateTimeKind.Utc).AddTicks(9141),
                            Description = "Item 10 description",
                            Name = "Item 10",
                            Status = 0,
                            UpdatedAt = new DateTime(2024, 9, 19, 19, 59, 27, 693, DateTimeKind.Utc).AddTicks(9141)
                        });
                });

            modelBuilder.Entity("GameLibraryApi.Modules.Items.ItemDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ItemDetails");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1025c3d1-0289-4356-9be0-1c5a24eacade",
                            Email = "oskar.eriksson@skoglit.sm",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "OSKAR.ERIKSSON@SKOGLIT.SE",
                            NormalizedUserName = "OSKAR.ERIKSSON@SKOGLIT.SE",
                            PasswordHash = "AQAAAAIAAYagAAAAEKcGVX3S272ZO8A4Qf++mSdgrkxcuplaHstSxRvOx9y2UXd9gUykrEZf62fzylRuvg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "096884d0-6aff-46ec-94c1-c158ddbab6f8",
                            TwoFactorEnabled = false,
                            UserName = "oskar.eriksson@skoglit.se"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
